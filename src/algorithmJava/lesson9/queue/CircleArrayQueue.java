package algorithmJava.lesson9.queue;

import java.util.Scanner;

public class CircleArrayQueue {//环形队列
    public static void main(String[] args) {
        //测试一把
        //创建一个队列
        CircleArray arrayQueue=new CircleArray(5);
        char key=' ';
        Scanner scanner=new Scanner(System.in);
        boolean loop=true;
        while (loop){
            System.out.println("s(show):显示队列");
            System.out.println("e(exit):退出程序");
            System.out.println("a(add):添加数据都队列");
            System.out.println("g(get):从队列取出数据");
            System.out.println("h(head):查看队列的数据");
            key=scanner.next().charAt(0);
            switch (key){
                case 's'://现实队列
                    arrayQueue.showQueue();
                    break;
                case 'a':
                    System.out.println("输入一个数");
                    int value=scanner.nextInt();
                    arrayQueue.addQueue(value);
                    break;

                case 'g'://取出
                    try {
                        int res=arrayQueue.getQueue();
                        System.out.printf("取出的数据是%d\n",res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'h'://查看队列头的数据
                    try {
                        int res=arrayQueue.headQueue();
                        System.out.printf("队列头的数据是%d\n",res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case 'e'://退出
                    scanner.close();
                    loop=false;
                    break;
                default:
                    break;
            }

        }
        System.out.println("程序退出");
    }
}

//使用数组模拟队列
class CircleArray {
    private int maxSize;//表示数组的最大容量
    private int front;//队列头
    private int rear;//队尾的后一个位置
    private int[] arr;//该数据用于存放数据，模拟队列

    public CircleArray(int arrMaxSize) {
        maxSize = arrMaxSize;
        arr = new int[maxSize];
    }

    //判断队列是否满
    public boolean isFull() {
        return (rear+1)%maxSize==front;
    }

    //判断队列是否为空
    public boolean isEmpty() {
        return rear == front;
    }

    public void addQueue(int n) {
        if (isFull()) {
            System.out.println("队列已满");
            return;
        }
        //直接将数据加入
        arr[rear] = n;
        //将rear后移，这里必须考虑取模
        rear=(rear+1)%maxSize;//此处，那rear永远取不到maxSize

    }

    //获取队列的数据，出队列
    public int getQueue() {
        //判断队列是否空
        if(isEmpty()){
            throw new RuntimeException("队列为空，不能取数据");
        }
        //这里需要分析出front是指向队列的第一个元素
        //1.先把front对应的值保留到一个临时变量
        //2.将front后移
        //3.将临时保存的变量返回
        int value=arr[front];
        front=(front+1)%maxSize;
        return value;
    }

    //显示队列的所有数据
    public void showQueue(){
        if(isEmpty()){
            System.out.println("队列为空，没有数据");
            return;
        }
        //思路：从front开始遍历，遍历多少个元素
        //动脑筋
        for (int i = front; i < front+size(); i++) {
            System.out.printf("arr[%d]=%d\n",i%maxSize,arr[i%maxSize]);//在数组中的位置。
        }
    }

    public int size(){
        return (rear+maxSize-front)%maxSize;
    }

    //显示队列的头数据，不是取

    public int headQueue(){
        if(isEmpty()){
            throw new RuntimeException("队列为空，不能取数据");
        }
        return arr[front];
    }
}
